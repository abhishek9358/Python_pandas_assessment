import pandas as pd
import numpy as np
# Creating a dummy dataset
data = {
'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
'Age': [25, 30, 35, 40, 45],
'Salary': [50000, 60000, 70000, 80000, 90000],
'Department': ['HR', 'IT', 'Finance', 'HR', 'IT'],
'Start_Date': pd.to_datetime(['2020-01-01', '2019-03-15', '2021-05-20', '2018-09-10', '2022-02-28']),
'Experience': [5, 10, 3, 15, 2],
'Rating': [4.2, 3.8, 4.5, 4.0, 4.7]
}
df = pd.DataFrame(data)
df

# Question 1: Selecting a Subset of the DataFrame
subset_df = df[df['Age'] > 30]
print(subset_df)


#Question 2: Creating New Columns Derived from Existing Columns
df['Age_Group'] = pd.cut(df['Age'], bins=[0, 30, 40, np.inf], labels=['<30', '30-40', '40+'])
print(df)

#Question 3: Calculating Summary Statistics
summary_stats = df.describe()
print(summary_stats)

#Question 4: Reshaping the Layout of Tables
reshaped_df = df.pivot_table(index='Name', columns='Department', values='Salary')
print(reshaped_df)

#Question 5: Combining Data from Multiple Tables
bonus_data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Bonus': [2000, 2500, 3000, 3500, 4000]
}
bonus_df = pd.DataFrame(bonus_data)
merged_df = pd.merge(df, bonus_df, on='Name')
print(merged_df)

#Question 6: Manipulating Textual Data
df['Name_Length'] = df['Name'].apply(len)
print(df)

#Question 7: Filtering Data Based on Multiple Conditions
filtered_df = df[(df['Department'] == 'IT') & (df['Age'] > 30)]
print(filtered_df)

#Question 8: Creating a New Column Based on Conditions
df['Performance'] = np.where(df['Rating'] >= 4.0, 'High', 'Low')
print(df)

#Question 9: Calculating Group-Wise Summary Statistics
group_stats = df.groupby('Department').agg({'Salary': 'mean', 'Experience': 'mean'})
print(group_stats)


#Question 10: Sorting Data
sorted_df = df.sort_values(by='Age', ascending=False)
print(sorted_df)


#Question 11: Concatenating DataFrames
additional_data = {
    'Name': ['Frank', 'Grace'],
    'Age': [55, 28],
    'Salary': [95000, 55000],
    'Department': ['Finance', 'IT'],
    'Start_Date': pd.to_datetime(['2016-04-10', '2020-08-15']),
    'Experience': [20, 4],
    'Rating': [4.8, 4.1]
}
additional_df = pd.DataFrame(additional_data)
concatenated_df = pd.concat([df, additional_df])
print(concatenated_df)


#Question 12: Handling Missing Data
df.loc[1:3, 'Salary'] = np.nan  
mean_salary = df['Salary'].mean()
df['Salary'].fillna(mean_salary, inplace=True)
print(df)

